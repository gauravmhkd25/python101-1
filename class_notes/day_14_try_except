
ERRORS;
Syntax Errors
Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:

Exceptions - error message shows the context where the exception happened, in the form of a stack traceback.
Even if a statement or expression is syntactically correct, 
it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions 

>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly



Try and Except

If an error is encountered, a try block code execution is stopped and transferred
down to the except block. 

EXCEPT::::::
In addition to using an except block after the try block

If no exception occurs - 
          the except clause is skipped and execution of the try statement is finished.
If an exception occurs during execution of the try clause -
          the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, 
          the except clause is executed, and then execution continues after the try statement.
If an exception occurs which does not match the exception named in the except clause - 
          it is passed on to outer try statements; if no handler is found, it is an unhandled exception and 
          execution stops with a message as shown above.


Terminal EX:

try:
    print "Hello World"
except:
    print "This is an error message!"
    
 In [69]: try:
    ...:     print (1/0)
    ...: except:
    ...:     print('An error occured ')
    
while True:
    ...:     try:
    ...:         x = int(input("Please enter a number: "))
    ...:         break
    ...:     except ValueError:
    ...:         print("Oops!  That was no valid number.  Try again...")
    
Exception handlers donâ€™t just handle exceptions if they occur immediately in the try clause, 
but also if they occur inside functions that are called (even indirectly) in the try clause. For example:


    
>>> def this_fails():
...     x = 1/0
...
>>> try:
...     this_fails()
... except ZeroDivisionError as err:
...     print('Handling run-time error:', err)
...
Handling run-time error: division by zero

    
EXCEPT and MORE :::: 

A try statement may have more than one except clause, to specify handlers for different exceptions. 
At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, 
not in other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple

... Try:
      <statement1 >
... except (RuntimeError, TypeError, NameError):
...     pass

Raising an Exception:::

You can raise an exception in your own program by using the raise exception 
Raising an exception breaks current code execution and returns the exception
back until it is handled.

>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: HiThere


>>> try:
...     raise NameError('HiThere')
... except NameError:
...     print('An exception flew by!')
...     raise


>>> try:
...     raise Exception('spam', 'eggs')
... except Exception as inst:
...     print(type(inst))    # the exception instance
...     print(inst.args)     # arguments stored in .args
...     print(inst)          # __str__ allows args to be printed directly,
...                          # but may be overridden in exception subclasses
...     x, y = inst.args     # unpack args
...     print('x =', x)
...     print('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs


Defining Clean-up Actions
The try statement has another optional clause which is intended to define clean-up actions 
that must be executed under all circumstances.

>>> try:
...     raise KeyboardInterrupt
... finally:
...     print('Goodbye, world!')


>>> def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print("division by zero!")
...     else:
...         print("result is", result)
...     finally:
...         print("executing finally clause")



    

