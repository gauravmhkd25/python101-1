DICT
more Json 
XML


key value pairs. The value can be accessed by unique key in the dictionary.

Built-in Functions

Dict.cmp(): Compares elements of both dict.
Dict.len(): Gives the total length of the dictionary.
Dict.str(): Produces a printable string representation of a dictionary.
Dict.type(): Returns the type of the passed variable.
Dict.clear(): Removes all elements of dictionary dict
Dict.copy(): Returns a shallow copy of dictionary dict
Dict.fromkeys(): Create a new dictionary with keys from seq and values set to value.
Dict.get(): For key, returns value or default if key not in dictionary
Dict.items(): Returns a list of dict’s (key, value) tuple pairs
Dict.keys(): Returns list of dictionary dict’s keys
Dict.setdefault(): Set dict[key]=default if key is not already in dict
Dict.update(): Adds dictionary dict2’s key-values pairs to dict
Dict.values(): Returns list of dictionary dict’s values

 

# Create a new dictionary 
d = dict() # or d = {}
 
# Add a key - value pairs to dictionary
d['xyz'] = 123
d['abc'] = 345
 
# print the whole dictionary
print(d)
 
# print only the keys
print(d.keys())
 
# print only values
print(d.values())
 
# iterate over dictionary 
for i in d :
    print("{} {}".format(i, d[i]))
 
# another method of iteration
for index, value in enumerate(d):
    print (index, value , d[value])
 
# check if key exist
print('xyz' in d)
 
# delete the key-value pair
del d['xyz']
 
# check again 
print("xyz" in d)

Update function:

In [100]: d = {1: "one", 2: "three"}
     ...: d1 = {2: "two"}
     ...: 

In [101]: d
Out[101]: {1: 'one', 2: 'three'}

In [102]: d1
Out[102]: {2: 'two'}

In [103]: d.update(d1) 

In [104]: d
Out[104]: {1: 'one', 2: 'two'}

In [105]: d[2]
Out[105]: 'two'

In [106]: type(d[2])
Out[106]: str

In [107]: d = {'x': 2}
     ...: 
     ...: d.update(y = 3, z = 0)
     ...: print(d)
     ...: 



Terminal Ex:
## complicated dictionary EX

dict1= {'author': 'Kif Leswing, Business Insider',
 'description': "There's a new scam going around that would terrify most people if it ever landed in their inbox.",
 'publishedAt': '2018-07-25T06:51:07Z',
 'source': {'id': None, 'name': 'Newsbtc.com'},
 'title': "Hackers Have Video of You Watching Porn? Here's How to Avoid This New Scam Threat",
 'url': 'https://www.sciencealert.com/protect-yourself-from-latest-hacked-passwords-and-sextortion-email-scam',
 'urlToImage': 'https://www.sciencealert.com/images/2018-07/processed/ScammersClaimingWatchingYouWatchPorn_1024.jpg'}



     
    
dict2 = {'author': 'Aayush Jindal',
 'description': 'Key Highlights Ripple price is slowly recovering and is currently trading above$0.4500 against the US dollar. There is a major bearish trend line in place with resistance at$0.4680 on the hourly chart of the XRP/USD pair (data source from Kraken). The pair …',
 'publishedAt': '2018-07-25T06:30:16Z',
 'source': {'id': None, 'name': 'Newsbtc.com'},
 'title': 'Ripple Price Analysis: XRP/USD Sighting Break Above $0.4700',
 'url': 'https://www.newsbtc.com/2018/07/25/ripple-price-analysis-xrp-usd-sighting-break-above-0-4700/',
 'urlToImage': 'https://s3.amazonaws.com/main-newsbtc-images/2018/04/17064027/techanalysis-xrp.jpg'}



     


In [64]: news_data = {'status': 'ok', 'totalResults' : 2, 'articles' : [dict1, dict2]} 

In [65]: news_data
Out[65]: 
{'articles': [{'author': 'Kif Leswing, Business Insider',
   'description': "There's a new scam going around that would terrify most people if it ever landed in their inbox.",
   'publishedAt': '2018-07-25T06:51:07Z',
   'source': {'id': None, 'name': 'Newsbtc.com'},
   'title': "Hackers Have Video of You Watching Porn? Here's How to Avoid This New Scam Threat",
   'url': 'https://www.sciencealert.com/protect-yourself-from-latest-hacked-passwords-and-sextortion-email-scam',
   'urlToImage': 'https://www.sciencealert.com/images/2018-07/processed/ScammersClaimingWatchingYouWatchPorn_1024.jpg'},
  {'author': 'Aayush Jindal',
   'description': 'Key Highlights Ripple price is slowly recovering and is currently trading above $0.4500 against the US dollar. There is a major bearish trend line in place with resistance at $0.4680 on the hourly chart of the XRP/USD pair (data source from Kraken). The pair …',
   'publishedAt': '2018-07-25T06:30:16Z',
   'source': {'id': None, 'name': 'Newsbtc.com'},
   'title': 'Ripple Price Analysis: XRP/USD Sighting Break Above $0.4700',
   'url': 'https://www.newsbtc.com/2018/07/25/ripple-price-analysis-xrp-usd-sighting-break-above-0-4700/',
   'urlToImage': 'https://s3.amazonaws.com/main-newsbtc-images/2018/04/17064027/techanalysis-xrp.jpg'}],
 'status': 'ok',
 'totalResults': 2}

get titles from above data
for i in news_data:
    #print (i)
    #print(news_data[i])
    if i == 'articles':
        print(i)
        for j in news_data['articles'] : 
            print(j['title'])

# clear() and copy()
 
# Initializing dictionary
dic1 = { 'Name' : 'Nandini', 'Age' : 19 }
 
# dic3 can be created or not , thats fine
dic3 = {}
 
# using copy() to make shallow copy of dictionary
dic3 = dic1.copy()
 
# printing new dictionary
print ("The new copied dictionary is : ")
print (dic3.items())
 
# clearing the dictionary
dic1.clear()
# deleting a dictionary is dealocating the variable d 
 
# printing cleared dictionary
print ("The contents of deleted dictionary is : ",end="")
print (dic1.items())


Handling missing keys: 

d = { 'a' : 1 , 'b' : 2 }

call 
d['c']  --> errors

get(key,def_val) method is useful when we have to check for the key.
If the key is present, value associated with the key is printed, 
else the def_value passed in arguments is returned.

You can call default user defined function 
person_1 = { 'name': 'Arun', 'age': 35 }
person_2 = { 'name': 'Anjali', 'age': 5 }

result = person_1.get('age', default_answer())
result = person_2.get('age', default_answer())

def default_answer():
  print("called default answer")
  return 100

# if you want to use dict like a stack then use pop
multiple ways to do the same: 
#way1
result = g.pop('age', False) or default_answer()
#way2
if 'age' in g:
    result = g['age']
else:
    result = default_answer()
 
 #way3
 
    try:
    result = g.pop('age')
except KeyError:
    result = default_answer()

Lets look at some collections on dict 
https://docs.python.org/3/library/collections.html#collections.defaultdict


HW: 
Use update on same keys and different keys and note teh difference
What does this do?
dict3  = {**dict1, **dict2}


JSON: 
JSON supports primitive types, like strings and numbers, as well as nested lists and objects.
Json encoding:serialization 
Json Decoding:de-serialization

json dumps and json dump
-dumps  to string
-dump to file

Terminal EX:

json_string = '{"first_name": "Guido", "last_name":"Rossum"}'

import json
parsed_json = json.loads(json_string)
print(parsed_json['first_name'])

d = {
    'first_name': 'Guido',
    'second_name': 'Rossum',
    'titles': ['BDFL', 'Developer'],
}
print(json.dumps(d))

data = {
    "president": {
        "name": "Zaphod Beeblebrox",
        "species": "Betelgeusian"
    }
}


# Dump to a  String 
json_str = json.dump(data)

# Dump to a file 
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)

python json--
https://docs.python.org/2/library/json.html

