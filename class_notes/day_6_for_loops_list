Loops & List




Loops & List
  We are going to use a for-loop in this exercise to build and print various lists.
  The for loop that is used to iterate over elements of a sequence, 
  it is often used when you have a piece of code which you want to repeat "n" number of time. 

  It works like this: " for all elements in a list, do this "

Terminal Ex:
  computer_brands = ["Apple", "Asus", "Dell", "Samsung"]
  for brands in computer_brands:
      print brands
    
LIST
Before you can use a for-loop, you need a way to store the results of loops somewhere. 
The best way to do this is with lists. Lists are exactly what their name says: 
a container of things that are organized in order from first to last.

Terminal EX
 #List, mixed datatypes in list
  hairs = [’brown’, ’blond’, ’red’] 
  eyes = [’brown’, ’blue’, ’green’] 
  weights = [1, 2, 3, 4]
  the_count = [1, 2, 3, 4, 5]
  fruits = ['apples', 'oranges', 'pears', 'apricots']
  change = [1, 'pennies', 2, 'dimes', 3, 'quarters']

#List and for loops
  numbers = [1,10,20,30,40,50]
  sum = 0
  for number in numbers:
      sum = sum + numbers
  print sum
 
    
 # Program to find the sum of all numbers stored in a list

The range() function
We can generate a sequence of numbers using range() function. range(10) will generate numbers from 0 to 9 (10 numbers).
We can also define the start, stop and step size as range(start,stop,step size). step size defaults to 1 if not provided.
This function does not store all the values in memory, it would be inefficient. 
So it remembers the start, stop, step size and generates the next number on the go.
To force this function to output all the items, we can use the function list().

Terminal Ex:
  print(range(10))
  print(list(range(10)))
  #start, stop, step size =1 when not provided
  print(list(range(2, 8)))

  #start, stop, step size
  print(list(range(2, 20, 3)))	

 #for loop using range
 We can use the range() function in for loops to iterate through a sequence of numbers. 
 It can be combined with the len() function to iterate though a sequence using indexing. Here is an example.
 Why does for i in range(1,3): only loop two times instead of three times? 
 The range() function only does numbers from the first to the last, not including the last. 
 So it stops at two, not three in the preceding. This turns out to be the most common way to do this kind of loop.
 
 Termial Ex:

   for i in range(1,10):
      print i
      
    # Program to iterate through a list using indexing
    
    genre = ['pop', 'rock', 'jazz']

    # iterate over the list using index
    for i in range(len(genre)):
      print("I like", genre[i])

Enumerate
Enumerate is a built-in function of Python. 
It’s usefulness can not be summarized in a single line. 
Yet most of the newcomers and even some advanced programmers are unaware of it. 
It allows us to loop over something and have an automatic counter. Here is an example:
Terminal EX:
  for loop with enumeration:
  my_list = ['apple', 'banana', 'grapes', 'pear']
  for c, value in enumerate(my_list, 1):
      print(c, value)
   choices = []
    for index, item in enumerate(choices):
        print index + 1, item

for loop with else
  A for loop can have an optional else block as well. The else part is executed if the items in the sequence used in for loop exhausts.
  break statement can be used to stop a for loop. In such case, the else part is ignored.
  Hence, a for loop's else part runs if no break occurs.

  digits = [0, 1, 5]

  for i in digits:
      print(i)
  else:
      print("No items left.")
      
   ex_17.py, ex_18.py
  
#Accessing Elements of Lists
To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index

Terminal EX:
  list1 = ['physics', 'chemistry', 1997, 2000];
  list2 = [1, 2, 3, 4, 5, 6, 7 ];
  print ("list1[0]: ", list1[0])
  print ("list2[1:5]: ", list2[1:5])
  
  list = ['physics', 'chemistry', 1997, 2000];
  print ("Value available at index 2 : ")
  print (list[2])
  list[2] = 2001;
  print ("New value available at index 2 : ")
  print (list[2])
  
 Delete List Elements
To remove a list element, 
you can use either the del statement if you know exactly which element(s) you are deleting 
or the remove() method if you do not know. 
Terminal Ex:
  list1 = ['physics', 'chemistry', 1997, 2000];
  print list1
  del list1[2];
  print "After deleting value at index 2 : "
  print list1
  
 Basic List Operations
Python ->	Description

Length:
len([1, 2, 3])	=> 3

Concatenation:
[1, 2, 3] + [4, 5, 6] =>	[1, 2, 3, 4, 5, 6]	

Repetition:
['Hi!'] * 4	=> ['Hi!', 'Hi!', 'Hi!', 'Hi!']	

Membership:
3 in [1, 2, 3]	=> True	

Iteration:
for x in [1, 2, 3]: print (x) => 1 2 3	

#Indexing, Slicing, and Matrixes
Because lists are sequences, indexing and slicing work the same way for lists as they do for strings.
Terminal Ex:
  L = ['spam', 'Spam', 'SPAM!']
  L[2]
  L[-2]
  L[1:]

#Elegancy
  pow2 = [2 ** x for x in range(10)]

  # Output: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
  print(pow2)

Python includes following list methods
1	list.append(obj)
Appends object obj to list
2	list.count(obj)
Returns count of how many times obj occurs in list
3	list.extend(seq)
Appends the contents of seq to list
4	list.index(obj)
Returns the lowest index in list that obj appears
5	list.insert(index, obj)
Inserts object obj into list at offset index
6	list.pop(obj=list[-1])
Removes and returns last object or obj from list
7	list.remove(obj)
Removes object obj from list
8	list.reverse()
Reverses objects of list in place
9	list.sort([func])
Sorts objects of list, use compare func if given
