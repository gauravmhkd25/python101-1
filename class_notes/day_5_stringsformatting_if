Today's topics
Python String Methods
Escape Sequence
What IF
IF ELSE
For loop

Python String Methods
  String is a sequence of characters. It's commonly used to represent text.
  There are number of methods defined in Python to work with strings.
 
 Terminal Ex:
  str = "programiz"
  #capitalize first letter
  print('str.capitalize() = ', str.capitalize())

  #computes length of a string
  print('len(str) = ', len(str))
  
capitalize() - Returns the string with first letter capitalized and the rest lowercased.
casefold() - Returns a lowercase string, generally used for caseless matching. This is more aggressive than the lower() method.
center() - Center the string within the specified width with optional fill character.
count() - Count the non-overlapping occurrence of supplied substring in the string.
encode() - Return the encoded version of the string as a bytes object.
endswith() - Returns ture if the string ends with the supplied substring.
expandtabs() - Return a string where all the tab characters are replaced by the supplied number of spaces.
find() - Return the index of the first occurrence of supplied substring in the string. Return -1 if not found.
format() - Format the given string.
format_map() - Format the given string.
index() - Return the index of the first occurrence of supplied substring in the string. Raise ValueError if not found.
isalnum() - Return true if the string is non-empty and all characters are alphanumeric.
isalpha() - Return true if the string is non-empty and all characters are alphabetic.
isdecimal() - Return true if the string is non-empty and all characters are decimal characters.
isdigit() - Return true if the string is non-empty and all characters are digits.
isidentifier() - Return true if the string is a valid identifier.
islower() - Return true if the string has all lowercased characters and at least one is cased character.
isnumeric() - Return true if the string is non-empty and all characters are numeric.
isprintable() - Return true if the string is empty or all characters are printable.
isspace() - Return true if the string is non-empty and all characters are whitespaces.
istitle() - Return true if the string is non-empty and titlecased.
isupper() - Return true if the string has all uppercased characters and at least one is cased character.
join() - Concatenate strings in the provided iterable with separator between them being the string providing this method.
ljust() - Left justify the string in the provided width with optional fill characters.
lower() - Return a copy of all lowercased string.
lstrip() - Return a string with provided leading characters removed.
maketrans() - Return a translation table.
partition() - Partition the string at first occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator.
replace() - Replace all old substrings with new substrings.
rfind() - Return the index of the last occurrence of supplied substring in the string. Return -1 if not found.
rindex() - Return the index of the last occurrence of supplied substring in the string. Raise ValueError if not found.
rjust() - Right justify the string in the provided width with optional fill characters.
rpartition() - Partition the string at last occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator.
rsplit() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the right.
rstrip() - Return a string with provided trailing characters removed.
split() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the left.
splitlines() - Return a list of lines in the string.
startswith() - Return true if the string starts with the provided substring.
strip() - Return a string with provided leading and trailing characters removed.
swapcase() - Return a string with lowercase characters converted to uppercase and vice versa.
title() - Return a title (first character of each word capitalized, others lowercased) cased string.
translate() - Return a copy of string that has been mapped according to the provided map.
upper() - Return a copy of all uppercased string.
zfill() - Return a numeric string left filled with zeros in the provided width.


Escape characters

  # using triple quotes
  print('''He said, "What's there?"''')

  # escaping single quotes
  print('He said, "What\'s there?"')

  # escaping double quotes
  print("He said, \"What's there?\"")
  
  Here is a list of all the escape sequence supported by Python.

Escape Sequence in Python
Escape Sequence	Description
\newline	Backslash and newline ignored
\\	Backslash
\'	Single quote
\"	Double quote
\a	
ASCII Bell

\b	ASCII Backspace
\f	ASCII Formfeed
\n	ASCII Linefeed
\r	ASCII Carriage Return
\t	ASCII Horizontal Tab
\v	ASCII Vertical Tab
\ooo	Character with octal value ooo
\xHH	Character with hexadecimal value HH

Terminal Ex
>>> print("This is \x61 \ngood example")
This is a
good example
>>> print(r"This is \x61 \ngood example")
This is \x61 \ngood example
ex_9.py

Asking input/ Prompting People

  we want to do now is get data into your programs.
  Most of what software does is the following:
  1. Take some kind of input from a person.
  2. Change it.
  3. Print out something to show how it changed.

Terminal EX:

  print("How old are you?", end=' ')
  age = input()
  print("How tall are you?", end=' ')
  height = input()
  print("How much do you weigh?", end=' ')
  weight = input()
  print(f"So, you're {age} old, {height} tall and {weight} heavy.")

  How do I get a number from some one so I can do math? 
  x=int(input())
  which gets the number as a string from input() then converts it to an integer using int().

  age = input("How old are you? ")
  height = input("How tall are you? ")
  weight = input("How much do you weigh? ")
  print(f"So, you're {age} old, {height} tall and {weight} heavy.")

  age = input("Your age? ")
  print(age, type(age))

  age = raw_input("Your age? ")
  print(age, type(age))
  age = int(raw_input("Your age? "))

  # DO this for all input... 
  type(age) 
  print(age, type(age))

System Arguments:
 We’ll write a script that also accepts arguments.

What is this?
  python test.py arg1 arg2 arg3
The Python sys module provides access to any command-line arguments via the sys.argv. This serves two purposes −
sys.argv is the list of command-line arguments
argv represents all the items that come along via the commandline input, 
it's basically a an array holding the command line arguments of our program. 
Don't forget that the counting starts at zero (0) not one (1).


Terminal Ex:
  import sys
  program_name = sys.argv[0]
  arguments = sys.argv[1:]
  count = len(arguments)
  
  import sys
  print (sys.argv)

  import sys
  print 'Number of arguments:', len(sys.argv), 'arguments.'
  print 'Argument List:', str(sys.argv)

ex11.py (please create a value ERROR and check why?) 
Are the command line arguments strings? 
Yes, they come in as strings, even if you typed numbers on the command line. 
Use int() to convert them just like with int(input()).



What are if...else statement in Python?
  The if…elif…else statement is used in Python for decision making. The program evaluates the test expression and will execute statement(s) only if the text expression is True.

If the text expression is False, the statement(s) is not executed.
Python if Statement Syntax
if test expression:
    statement(s)
 
Python if...else Statement
  Syntax of if...else
  if test expression:
      Body of if
  else:
      Body of else
 
 Terminl EX
 EX: if 

     num = 3
      if num > 0:
          print(num, "is a positive number.")
      print("This is always printed.")

      num = -1
      if num > 0:
          print(num, "is a positive number.")
      print("This is also always printed.")
      
    EX: if...else 

    num = 3

    # Try these two variations as well. 
    # num = -5
    # num = 0

    if num >= 0:
        print("Positive or Zero")
    else:
        print("Negative number")

EX:
ex_13.py, ex_14.py

Python if...elif...else Statement
Syntax of if...elif...else

  if test expression:
      Body of if
  elif test expression:
      Body of elif
  else: 
      Body of else
      
The elif is short for else if. It allows us to check for multiple expressions.
If the condition for if is False, it checks the condition of the next elif block and so on.
If all the conditions are False, body of else is executed.
Only one block among the several if...elif...else blocks is executed according to the condition.
The if block can have only one else block. But it can have multiple elif blocks.

Terminal EX:
    # In this program, 
    # we check if the number is positive or
    # negative or zero and 
    # display an appropriate message

    num = 3.4

    # Try these two variations as well:
    # num = 0
    # num = -4.5

    if num > 0:
        print("Positive number")
    elif num == 0:
        print("Zero")
    else:
        print("Negative number")

ex_15.py

Python Nested if statements
Any number of these statements can be nested inside one another. 
Indentation is the only way to figure out the level of nesting. 
This can get confusing, so must be avoided if we can.

Terminal Ex:
Python Nested if Example
  # In this program, we input a number
  # check if the number is positive or
  # negative or zero and display
  # an appropriate message
  # This time we use nested if

  num = float(input("Enter a number: "))
  if num >= 0:
      if num == 0:
          print("Zero")
      else:
          print("Positive number")
  else:
      print("Negative number")


HW.5
1. WAP to implement all string fnctionalities and comment on each and every function after looking at the result. 
2. WAP to find largest number of 3 numbers (a, b, c), ask input from users.

